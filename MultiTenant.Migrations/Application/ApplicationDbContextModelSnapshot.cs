// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MultiTenant.Infrastructure.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MultiTenant.Migrations.Application
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MultiTenant.Domain.Orders.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Domain.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer")
                        .HasColumnName("channel_id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("DeliveryCharge")
                        .HasColumnType("numeric")
                        .HasColumnName("delivery_charge");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric")
                        .HasColumnName("discount");

                    b.Property<decimal>("NetTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("net_total");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("numeric")
                        .HasColumnName("total_tax");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_orders_channel_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_orders_customer_id");

                    b.HasIndex("PaymentId")
                        .IsUnique()
                        .HasDatabaseName("ix_orders_payment_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_orders_status_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Domain.Orders.OrderChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_order_channels");

                    b.ToTable("order_channels", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Domain.Orders.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("currency_id");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_method_id");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_payments_currency_id");

                    b.HasIndex("PaymentMethodId")
                        .HasDatabaseName("ix_payments_payment_method_id");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Domain.Orders.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_payment_methods");

                    b.ToTable("payment_methods", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_product_id");

                    b.Property<string>("StockKeepingUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stock_keeping_unit");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_products_country_id");

                    b.HasIndex("ParentProductId")
                        .HasDatabaseName("ix_products_parent_product_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Domain.Products.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ConversionFactor")
                        .HasColumnType("numeric")
                        .HasColumnName("conversion_factor");

                    b.Property<bool>("IsStandardUnit")
                        .HasColumnType("boolean")
                        .HasColumnName("is_standard_unit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("UnitTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_type_id");

                    b.HasKey("Id")
                        .HasName("pk_units");

                    b.HasIndex("UnitTypeId")
                        .HasDatabaseName("ix_units_unit_type_id");

                    b.ToTable("units", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Domain.Settings.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Domain.Settings.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("numeric")
                        .HasColumnName("exchange_rate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.ToTable("currencies", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Domain.Settings.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_order_statuses");

                    b.ToTable("order_statuses", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Domain.Settings.UnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_unit_types");

                    b.ToTable("unit_types", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Domain.Tenants.DeliveryMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_delivery_methods");

                    b.ToTable("delivery_methods", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Domain.Tenants.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Domain.Tenants.Tax", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric")
                        .HasColumnName("rate");

                    b.HasKey("Id")
                        .HasName("pk_taxes");

                    b.ToTable("taxes", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Domain.Tenants.VariantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_variant_types");

                    b.ToTable("variant_types", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Domain.Orders.Customer", b =>
                {
                    b.OwnsOne("MultiTenant.Domain.Common.ValueObjects.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_country");

                            b1.Property<string>("LineOne")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_line_one");

                            b1.Property<string>("LineThree")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_line_three");

                            b1.Property<string>("LineTwo")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_line_two");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_postcode");

                            b1.HasKey("CustomerId");

                            b1.ToTable("customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId")
                                .HasConstraintName("fk_customers_customers_id");
                        });

                    b.Navigation("BillingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenant.Domain.Orders.Order", b =>
                {
                    b.HasOne("MultiTenant.Domain.Orders.OrderChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_order_channels_channel_id");

                    b.HasOne("MultiTenant.Domain.Orders.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_customers_customer_id");

                    b.HasOne("MultiTenant.Domain.Orders.Payment", "Payment")
                        .WithOne()
                        .HasForeignKey("MultiTenant.Domain.Orders.Order", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_payments_payment_id");

                    b.HasOne("MultiTenant.Domain.Settings.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_order_statuses_order_status_id");

                    b.OwnsOne("MultiTenant.Domain.Common.ValueObjects.Address", "ShippingAddress", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_country");

                            b1.Property<string>("LineOne")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_line_one");

                            b1.Property<string>("LineThree")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_line_three");

                            b1.Property<string>("LineTwo")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_line_two");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_postcode");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_orders_orders_id");
                        });

                    b.OwnsMany("MultiTenant.Domain.Orders.ValueObjects.AppliedTax", "AppliedTaxes", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid")
                                .HasColumnName("order_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.Property<decimal>("Rate")
                                .HasColumnType("numeric")
                                .HasColumnName("rate");

                            b1.Property<Guid>("TaxId")
                                .HasColumnType("uuid")
                                .HasColumnName("tax_id");

                            b1.HasKey("OrderId", "Id")
                                .HasName("pk_applied_tax");

                            b1.ToTable("applied_tax", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_applied_tax_orders_order_id");
                        });

                    b.OwnsMany("MultiTenant.Domain.Orders.ValueObjects.OrderItem", "OrderItems", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid")
                                .HasColumnName("order_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<decimal>("DiscountPercentage")
                                .HasColumnType("numeric")
                                .HasColumnName("discount_percentage");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("price");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid")
                                .HasColumnName("product_id");

                            b1.Property<int>("Quantity")
                                .HasColumnType("integer")
                                .HasColumnName("quantity");

                            b1.Property<string>("StockKeepingUnit")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("stock_keeping_unit");

                            b1.HasKey("OrderId", "Id")
                                .HasName("pk_order_item");

                            b1.ToTable("order_item", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_order_item_orders_order_id");
                        });

                    b.Navigation("AppliedTaxes");

                    b.Navigation("Channel");

                    b.Navigation("Customer");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderStatus");

                    b.Navigation("Payment");

                    b.Navigation("ShippingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenant.Domain.Orders.Payment", b =>
                {
                    b.HasOne("MultiTenant.Domain.Settings.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_currencies_currency_id");

                    b.HasOne("MultiTenant.Domain.Orders.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_payment_methods_payment_method_id");

                    b.Navigation("Currency");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("MultiTenant.Domain.Products.Product", b =>
                {
                    b.HasOne("MultiTenant.Domain.Settings.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_countries_country_id");

                    b.HasOne("MultiTenant.Domain.Products.Product", "ParentProduct")
                        .WithMany("Variants")
                        .HasForeignKey("ParentProductId")
                        .HasConstraintName("fk_products_products_parent_product_id");

                    b.OwnsOne("MultiTenant.Domain.Common.ValueObjects.ArchivableAuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("ArchivedByUserId")
                                .HasColumnType("text")
                                .HasColumnName("archived_by_user");

                            b1.Property<DateTime?>("ArchivedDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("archived_date");

                            b1.Property<string>("CreatedByUserId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("created_by_user");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_date");

                            b1.Property<bool>("IsArchived")
                                .HasColumnType("boolean")
                                .HasColumnName("is_archived");

                            b1.Property<string>("UpdatedByUserId")
                                .HasColumnType("text")
                                .HasColumnName("updated_by_user");

                            b1.Property<DateTime?>("UpdatedDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_date");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsOne("MultiTenant.Domain.Products.ValueObjects.DimensionsAndWeight", "DimensionsAndWeight", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Depth")
                                .HasColumnType("numeric")
                                .HasColumnName("depth");

                            b1.Property<int>("DimensionUnitId")
                                .HasColumnType("integer")
                                .HasColumnName("dimensions_and_weight_dimension_unit_id");

                            b1.Property<decimal>("Height")
                                .HasColumnType("numeric")
                                .HasColumnName("height");

                            b1.Property<decimal>("Weight")
                                .HasColumnType("numeric")
                                .HasColumnName("weight");

                            b1.Property<int>("WeightUnitId")
                                .HasColumnType("integer")
                                .HasColumnName("dimensions_and_weight_weight_unit_id");

                            b1.Property<decimal>("Width")
                                .HasColumnType("numeric")
                                .HasColumnName("width");

                            b1.HasKey("ProductId");

                            b1.HasIndex("DimensionUnitId")
                                .HasDatabaseName("ix_products_dimensions_and_weight_dimension_unit_id");

                            b1.HasIndex("WeightUnitId")
                                .HasDatabaseName("ix_products_dimensions_and_weight_weight_unit_id");

                            b1.ToTable("products");

                            b1.HasOne("MultiTenant.Domain.Products.Unit", "DimensionUnit")
                                .WithMany()
                                .HasForeignKey("DimensionUnitId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_products_units_dimensions_and_weight_dimension_unit_id");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");

                            b1.HasOne("MultiTenant.Domain.Products.Unit", "WeightUnit")
                                .WithMany()
                                .HasForeignKey("WeightUnitId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_products_units_dimensions_and_weight_weight_unit_id");

                            b1.Navigation("DimensionUnit");

                            b1.Navigation("WeightUnit");
                        });

                    b.OwnsOne("MultiTenant.Domain.Products.ValueObjects.Pricing", "Pricing", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("CostPrice")
                                .HasColumnType("numeric")
                                .HasColumnName("cost_price");

                            b1.Property<decimal>("PriceExcludingTax")
                                .HasColumnType("numeric")
                                .HasColumnName("price_excluding_tax");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("DimensionsAndWeight")
                        .IsRequired();

                    b.Navigation("ParentProduct");

                    b.Navigation("Pricing")
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenant.Domain.Products.Unit", b =>
                {
                    b.HasOne("MultiTenant.Domain.Settings.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_units_unit_types_unit_type_id");

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("MultiTenant.Domain.Tenants.Employee", b =>
                {
                    b.OwnsOne("MultiTenant.Domain.Common.ValueObjects.ArchivableAuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("ArchivedByUserId")
                                .HasColumnType("text")
                                .HasColumnName("archived_by_user");

                            b1.Property<DateTime?>("ArchivedDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("archived_date");

                            b1.Property<string>("CreatedByUserId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("created_by_user");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_date");

                            b1.Property<bool>("IsArchived")
                                .HasColumnType("boolean")
                                .HasColumnName("is_archived");

                            b1.Property<string>("UpdatedByUserId")
                                .HasColumnType("text")
                                .HasColumnName("updated_by_user");

                            b1.Property<DateTime?>("UpdatedDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_date");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId")
                                .HasConstraintName("fk_employees_employees_id");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenant.Domain.Tenants.Tax", b =>
                {
                    b.OwnsOne("MultiTenant.Domain.Common.ValueObjects.ArchivableAuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("TaxId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("ArchivedByUserId")
                                .HasColumnType("text")
                                .HasColumnName("archived_by_user");

                            b1.Property<DateTime?>("ArchivedDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("archived_date");

                            b1.Property<string>("CreatedByUserId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("created_by_user");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_date");

                            b1.Property<bool>("IsArchived")
                                .HasColumnType("boolean")
                                .HasColumnName("is_archived");

                            b1.Property<string>("UpdatedByUserId")
                                .HasColumnType("text")
                                .HasColumnName("updated_by_user");

                            b1.Property<DateTime?>("UpdatedDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_date");

                            b1.HasKey("TaxId");

                            b1.ToTable("taxes");

                            b1.WithOwner()
                                .HasForeignKey("TaxId")
                                .HasConstraintName("fk_taxes_taxes_id");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenant.Domain.Tenants.VariantType", b =>
                {
                    b.OwnsMany("MultiTenant.Domain.Tenants.ValueObjects.VariantTypeDefault", "VariantTypeDefaults", b1 =>
                        {
                            b1.Property<int>("VariantTypeId")
                                .HasColumnType("integer")
                                .HasColumnName("variant_type_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("VariantTypeId", "Id")
                                .HasName("pk_variant_type_default");

                            b1.ToTable("variant_type_default", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("VariantTypeId")
                                .HasConstraintName("fk_variant_type_default_variant_types_variant_type_id");
                        });

                    b.Navigation("VariantTypeDefaults");
                });

            modelBuilder.Entity("MultiTenant.Domain.Orders.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MultiTenant.Domain.Products.Product", b =>
                {
                    b.Navigation("Variants");
                });
#pragma warning restore 612, 618
        }
    }
}
